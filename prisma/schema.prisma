// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  status       AccountStatus @default(PENDING)
  ownerEmail   String
  contactEmail String
  caterers     Caterer[]
  users        User[]
  crms         AccountCrm[]
  accountOwner AccountOwner?
}

model AccountOwner {
  accountId String  @unique()
  ownerId   String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  owner     User    @relation(fields: [ownerId], references: id)

  @@id([accountId, ownerId])
}

model User {
  id                    String                  @id @default(uuid())
  email                 String
  firstName             String
  lastName              String?
  hashedPassword        String
  hashedRt              String?
  salt                  String
  accountId             String
  account               Account                 @relation(fields: [accountId], references: [id], onDelete: Cascade)
  archivedOrders        ArchivedOrder[]
  ownedAccounts         AccountOwner[]
  accountRole           UserAccountRole?
  roleGrants            UserAccountRole[]       @relation(name: "Grantor")
  catererPointOfContact CatererPointOfContact[]

  @@unique([email])
  @@index([email], type: BTree)
}

model UserAccountRole {
  userId    String   @id
  roleName  RoleName
  grantorId String
  grantedOn DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleName], references: [name])
  grantor   User     @relation(fields: [grantorId], references: [id], name: "Grantor")
}

model Role {
  name         RoleName          @id
  accountUsers UserAccountRole[]
  permissions  RolePermission[]
}

enum RoleName {
  MANAGER
}

model RolePermission {
  roleName   RoleName
  permission AccountPermissionName

  role Role @relation(fields: [roleName], references: [name])

  @@id([roleName, permission])
}

enum AccountPermissionName {
  EDIT_ACCOUNT_INTEGRATION_CONFIGURATION
  EDIT_ACCOUNT_INTEGRATIONS
  EDIT_ACCOUNT_SECRETS
  EDIT_USER_ROSTER
}

enum AccountStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum Event {
  ORDER_CREATED
}

model AccountCrm {
  id                      String                      @id @default(uuid())
  accountId               String
  crmId                   String
  nonSensitiveCredentials Json?
  isConfigured            Boolean                     @default(false)
  isActive                Boolean                     @default(true)
  account                 Account                     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  crm                     Crm                         @relation(fields: [crmId], references: [id])
  eventProcesses          AccountCrmEventProcess[]
  secretRefs              AccountCrmSecretReference[]

  @@unique([accountId, crmId])
  @@index([accountId], type: BTree)
}

model AccountCrmEventProcess {
  id           String               @id @default(uuid())
  accountCrmId String
  event        Event
  action       CrmIntegrationAction
  accountCrm   AccountCrm           @relation(fields: [accountCrmId], references: [id])

  @@unique([accountCrmId, event, action])
  @@index([accountCrmId])
}

enum CrmIntegrationAction {
  CREATE_LEAD
  CREATE_CONTACT
  CREATE_ORDER
}

model AccountCrmSecretReference {
  secretName   String                               @id @default(uuid())
  type         IntegrationSecretReferenceSecretType
  accountCrmId String
  accountCrm   AccountCrm                           @relation(fields: [accountCrmId], references: [id], onDelete: Cascade)

  @@unique([type, accountCrmId])
  @@index([accountCrmId], type: BTree)
}

enum IntegrationSecretReferenceSecretType {
  API_KEY
}

model Caterer {
  id                    String                 @id @default(uuid())
  name                  String
  ezManageId            String?
  accountId             String
  account               Account                @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Menu                  Menu[]
  CatererPointOfContact CatererPointOfContact?
  Order                 Order[]
  ArchivedOrder         ArchivedOrder[]

  @@index([accountId], type: BTree)
}

model CatererPointOfContact {
  catererId String  @id
  caterer   Caterer @relation(fields: [catererId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String?
  email     String
  phone     String?
  userId    String?
  user      User?   @relation(fields: [userId], references: [id])
}

model Menu {
  id        String     @id @default(uuid())
  catererId String
  caterer   Caterer    @relation(fields: [catererId], references: [id], onDelete: Cascade)
  source    MenuSource
  sourceId  String
  MenuItem  MenuItem[]

  @@index([catererId], type: BTree)
}

enum MenuSource {
  EZMANAGE
  OTHER
}

model MenuItem {
  id                String              @id @default(uuid())
  menuId            String
  menu              Menu                @relation(fields: [menuId], references: [id], onDelete: Cascade)
  OrderItem         OrderItem[]
  ArchivedOrderItem ArchivedOrderItem[]

  @@index([menuId], type: BTree)
}

model Order {
  id              String        @id @default(uuid())
  status          OrderStatus
  placementDate   DateTime
  fulfillmentDate DateTime
  fulfilledDate   DateTime?
  canceledDate    DateTime?
  sourceId        String
  source          OrderSource   @default(OTHER)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  catererId       String?
  caterer         Caterer?      @relation(fields: [catererId], references: [id], onDelete: SetNull)
  targets         OrderTarget[]
  items           OrderItem[]

  @@index([catererId], type: BTree)
}

enum OrderStatus {
  ACTIVE
  CANCELED
  FULFILLED
}

enum OrderSource {
  EZMANAGE
  INTERNAL
  OTHER
}

model OrderTarget {
  id                     String          @id @default(uuid())
  targetType             OrderTargetType
  externalHostId         String
  externalHostRecordType String
  externalHostRecordId   String
  orderId                String
  order                  Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], type: BTree)
}

enum OrderTargetType {
  CRM
}

model OrderItem {
  id         String    @id @default(uuid())
  quantity   Int
  menuItemId String?
  menuItem   MenuItem? @relation(fields: [menuItemId], references: [id], onDelete: SetNull)
  orderId    String
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], type: BTree)
}

model ArchivedOrder {
  id              String                @id @default(uuid())
  archivedOn      DateTime
  archivedBy      String?
  status          OrderStatus
  placementDate   DateTime
  fulfillmentDate DateTime
  fulfilledDate   DateTime?
  canceledDate    DateTime?
  sourceId        String
  source          OrderSource           @default(OTHER)
  catererId       String?
  caterer         Caterer?              @relation(fields: [catererId], references: [id], onDelete: SetNull)
  targets         ArchivedOrderTarget[]
  items           ArchivedOrderItem[]
  archiver        User?                 @relation(fields: [archivedBy], references: [id], onDelete: SetNull)
}

model ArchivedOrderTarget {
  id         String          @id @default(uuid())
  targetType OrderTargetType
  hostId     String
  hostType   String
  hostRefId  String
  orderId    String
  order      ArchivedOrder   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ArchivedOrderItem {
  id         String        @id @default(uuid())
  quantity   Int
  name       String
  menuItemId String?
  menuName   String?
  orderId    String
  order      ArchivedOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem   MenuItem?     @relation(fields: [menuItemId], references: [id], onDelete: SetNull)
}

model Crm {
  id                    String            @id @default(uuid())
  name                  CrmName           @unique()
  configurationTemplate Json // See prisma README for specifics on the JSON schema
  accountCrms           AccountCrm[]
  validEventProcesses   CrmEventProcess[]
}

enum CrmName {
  NUTSHELL
}

enum CrmRecordType {
  CONTACT
  LEAD
}

model CrmEventProcess {
  crmId  String
  action CrmIntegrationAction

  crm Crm @relation(fields: [crmId], references: [id])

  @@id([crmId, action])
  @@index([crmId])
}
