// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String                @id @default(uuid())
  name         String
  status       AccountStatus         @default(PENDING)
  ownerEmail   String
  contactEmail String
  caterers     Caterer[]
  users        User[]
  crms         AccountCrm[]
  processes    AccountEventProcess[]
  accountOwner AccountOwner?
}

model AccountOwner {
  accountId String  @unique()
  ownerId   String
  account   Account @relation(fields: [accountId], references: [id])
  owner     User    @relation(fields: [ownerId], references: id)

  @@id([accountId, ownerId])
}

model User {
  id             String          @id @default(uuid())
  email          String
  firstName      String
  lastName       String?
  hashedPassword String
  hashedRt       String?
  salt           String
  accountId      String
  account        Account         @relation(fields: [accountId], references: [id])
  archivedOrders ArchivedOrder[]
  ownedAccounts  AccountOwner[]

  @@unique([email])
  @@index([email], type: BTree)
}

enum AccountStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

model AccountEventProcess {
  accountId String
  event     Event
  process   EventProcess
  account   Account      @relation(fields: [accountId], references: [id])

  @@id([accountId, event, process])
  @@index([accountId, event])
}

enum Event {
  ORDER_CREATED
}

enum EventProcess {
  CREATE_CRM_LEAD
  CREATE_CRM_CONTACT
  CREATE_CRM_ORDER
}

model AccountCrm {
  id                      String                      @id @default(uuid())
  accountId               String
  crmId                   String
  nonSensitiveCredentials Json?
  isConfigured            Boolean                     @default(false)
  account                 Account                     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  crm                     Crm                         @relation(fields: [crmId], references: [id])
  crmSecretRefs           AccountCrmSecretReference[]

  @@unique([accountId, crmId])
  @@index([accountId], type: BTree)
}

model AccountCrmSecretReference {
  secretName   String                           @id @default(uuid())
  type         AccountSecretReferenceSecretType
  accountCrmId String
  accountCrm   AccountCrm                       @relation(fields: [accountCrmId], references: [id])

  @@unique([type, accountCrmId])
  @@index([accountCrmId], type: BTree)
}

enum AccountSecretReferenceSecretType {
  API_KEY
}

model Caterer {
  id                    String                 @id @default(uuid())
  name                  String
  ezManageId            String?
  accountId             String
  account               Account                @relation(fields: [accountId], references: [id])
  Menu                  Menu[]
  CatererPointOfContact CatererPointOfContact?
  Order                 Order[]
  ArchivedOrder         ArchivedOrder[]

  @@index([accountId], type: BTree)
}

model CatererPointOfContact {
  catererId String  @id
  caterer   Caterer @relation(fields: [catererId], references: [id])
  firstName String
  lastName  String?
  email     String
  phone     String?
}

model Menu {
  id        String     @id @default(uuid())
  catererId String
  caterer   Caterer    @relation(fields: [catererId], references: [id])
  source    MenuSource
  sourceId  String
  MenuItem  MenuItem[]

  @@index([catererId], type: BTree)
}

enum MenuSource {
  EZMANAGE
  OTHER
}

model MenuItem {
  id                String              @id @default(uuid())
  menuId            String
  menu              Menu                @relation(fields: [menuId], references: [id])
  OrderItem         OrderItem[]
  ArchivedOrderItem ArchivedOrderItem[]

  @@index([menuId], type: BTree)
}

model Order {
  id              String        @id @default(uuid())
  status          OrderStatus
  placementDate   DateTime
  fulfillmentDate DateTime
  fulfilledDate   DateTime?
  canceledDate    DateTime?
  sourceId        String
  source          OrderSource   @default(OTHER)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  catererId       String
  caterer         Caterer       @relation(fields: [catererId], references: [id])
  targets         OrderTarget[]
  items           OrderItem[]

  @@index([catererId], type: BTree)
}

enum OrderStatus {
  ACTIVE
  CANCELED
  FULFILLED
}

enum OrderSource {
  EZMANAGE
  INTERNAL
  OTHER
}

model OrderTarget {
  id                     String          @id @default(uuid())
  targetType             OrderTargetType
  externalHostId         String
  externalHostRecordType String
  externalHostRecordId   String
  orderId                String
  order                  Order           @relation(fields: [orderId], references: [id])

  @@index([orderId], type: BTree)
}

enum OrderTargetType {
  CRM
}

model OrderItem {
  id         String   @id @default(uuid())
  quantity   Int
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])

  @@index([orderId], type: BTree)
}

model ArchivedOrder {
  id              String                @id @default(uuid())
  archivedOn      DateTime
  archivedBy      String
  status          OrderStatus
  placementDate   DateTime
  fulfillmentDate DateTime
  fulfilledDate   DateTime?
  canceledDate    DateTime?
  sourceId        String
  source          OrderSource           @default(OTHER)
  catererId       String
  caterer         Caterer               @relation(fields: [catererId], references: [id])
  targets         ArchivedOrderTarget[]
  items           ArchivedOrderItem[]
  archiver        User                  @relation(fields: [archivedBy], references: [id])
}

model ArchivedOrderTarget {
  id         String          @id @default(uuid())
  targetType OrderTargetType
  hostId     String
  hostType   String
  hostRefId  String
  orderId    String
  order      ArchivedOrder   @relation(fields: [orderId], references: [id])
}

model ArchivedOrderItem {
  id         String        @id @default(uuid())
  quantity   Int
  name       String
  menuItemId String?
  menuName   String?
  orderId    String
  order      ArchivedOrder @relation(fields: [orderId], references: [id])
  MenuItem   MenuItem?     @relation(fields: [menuItemId], references: [id])
}

model Crm {
  id                    String       @id @default(uuid())
  name                  CrmName      @unique()
  configurationTemplate Json // See prisma README for specifics on the JSON schema
  accountCrms           AccountCrm[]
}

enum CrmName {
  NUTSHELL
}

enum CrmRecordType {
  CONTACT
  LEAD
}
